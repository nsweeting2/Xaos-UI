<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>Questing Update Alias</name>
			<script>qwn.downloadPackage()</script>
			<command></command>
			<packageName></packageName>
			<regex>^questing update$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>msdp.grab_QUEST_LIST</name>
			<packageName></packageName>
			<script>--This function fires on the msdp.QUEST_LIST event
--msdp.QUEST_LIST is a table of comma delimited strings
--each string is a list of quests from a questmaster
--msdp.QUEST_LIST happens when you walk into a room with a questmaster
--Values are formatted like this, questName:action
--questName contains the string the game expects for the quest
--action contains complete/incomplete/request
--script must be enabled for the event to run the function

function msdp.grab_QUEST_LIST()
  --cecho("&lt;yellow&gt;[ DEBUG ] - &lt;grey&gt;QUEST_LIST:\n")
  --display(msdp.QUEST_LIST)
  --check if we got a empty table, if so we are done
  if msdp.QUEST_LIST == "" then
    return
  end
  --A table for us to turn our string into a table
  --all questmasters will be processed by this
  local quests = {}
  for qm, q in pairs(msdp.QUEST_LIST) do
    for quest in rex.gmatch(tostring(q), [[(.+?\:\w+),]]) do
      table.insert(quests, quest)
    end
  end
  --Now we loop the quests table and send commands
  for k, v in pairs(quests) do
    local quest = ""
    local action = ""
    quest, action = rex.match(tostring(v), [[(.+?):(\w+)]])
    if tostring(action) == "request" then
      send("quest request " .. tostring(quest))
    end
    if tostring(action) == "completed" then
      send("quest completed " .. tostring(quest))
    end
  end
end</script>
			<eventHandlerList>
				<string>msdp.QUEST_LIST</string>
			</eventHandlerList>
		</Script>
		<Script isActive="yes" isFolder="no">
			<name>Questing Script</name>
			<packageName></packageName>
			<script>--Xaos automatic questing written by Noax.
--Comically refered to by: Now you're questing with Noax.
--Created July 2019, MSDP'd October 2020

--Updater code based on Jor'Mox's Generic Map Script
--I opted to check for updates only when a character is
--connected or reconnected to the server to save on complexity
--I do this by handling a IAC AYT signal with sysTelnetEvent

--Requires the msdp protocol.

--Setup global table for msdp, the mud/client will nest everything in here.
--Keep in mind other packages will work with this table.
--Table should always be created as seen below, don't overwrite.
msdp = msdp or {}

--profilePath so we can use in in functions below
local profilePath = getMudletHomeDir()
profilePath = profilePath:gsub("\\","/") --fix the path for windows folks

--Setup global table for QuestingWithNoax, we will nest almost everything in here.
qwn = qwn or {
  ignoreQuests = {},
  debug = false,
  version = 2.0, --version we compare for updating
  downloading = false, --if we are downloading a update
  downloadPath = "https://raw.githubusercontent.com/nsweeting2/Xaos-UI/main/QuestingWithNoax/", --path we download files from
  updating = false, --if we are installing and update
  }

--formatting for our standardized echos
local noaxTag = "&lt;DarkViolet&gt;[&lt;ansiMagenta&gt; NOAX &lt;DarkViolet&gt;]  - &lt;reset&gt;"
local debugTag = "&lt;SkyBlue&gt;[DEBUG ]  - &lt;reset&gt;"
local errTag = "&lt;ansiRed&gt;(&lt;Red&gt;ERROR &lt;ansiRed&gt;]  - &lt;reset&gt;"

--echo functions for style points
local function debugEcho(text)
  if qwn.debug then
    cecho(debugTag .. text .. "\n")
  end  
end

local function noaxEcho(text)
    cecho(noaxTag .. text .. "\n")
end

local function errorEcho(text)
  if qwn.debug then
    cecho(errTag .. text .. "\n")
  end  
end

local function config()
  debugEcho("Questing Script: config() invoked")
  local defaults = qwn.defaults
  local configs = qwn.configs or {}
  local path = profilePath .. "/questing downloads"
  if not io.exists(path) then
    debugEcho("creating questing downloads folder")
    lfs.mkdir(path)
  else
    debugEcho("questing downloads folder already exists")
  end
  --load stored configs from file if it exists
  --if io.exists(path.."/configs.lua") then
    --table.load(path.."/configs.lua",configs)
  --end
  -- overwrite default values with stored config values
  --configs = table.update(defaults, configs)
  --qwn.configs = configs
  --we do not need to change update path
  --update to the current download path
  --if qwn.configs.downloadPath == " " then
    --qwn.configs.downloadPath = " "
  --end
  --configure the msdp we need for questing
  debugEcho("Registering for msdp.QUEST_LIST")
  sendMSDP("REPORT","QUEST_LIST")
  debugEcho("Config() is complete")
  noaxEcho("Now You're Questing With Noax has been registered.")
end

local function compareVersion()
  debugEcho("Questing Script: compareVersion() invoked")
  local path = profilePath .. "/questing downloads/versions.lua"
  local versions = {}
  table.load(path, versions)
  local pos = table.index_of(versions, qwn.version) or 0
  if pos ~= #versions then
    debugEcho("qwn is out of date")
    debugEcho("update alias enabled")
    enableAlias("Questing Update Alias")
    noaxEcho(string.format("Questing With Noax Script is currently %d versions behind.",#versions - pos))
    noaxEcho("To update now, please type: questing update")
  else
    debugEcho("qwn is up to date")
  end
  debugEcho("compareVersions() is complete")
end

function qwn.downloadVersions()
  debugEcho("Questing Script: qwn.downloadVersions() invoked")
  if qwn.downloadPath ~= "" then
    debugEcho("pre download check passed")
    local path, file = profilePath .. "/questing downloads", "/versions.lua"
    debugEcho("qwn.downloading set to true")
    qwn.downloading = true
    debugEcho("downloading lua file from " .. tostring(qwn.downloadPath))
    downloadFile(path .. file, qwn.downloadPath .. file)
  else
    debugEcho("pre download check failed")
  end
  debugEcho("qwn.downloadVersions() is complete")
end

local function updatePackage()
  debugEcho("Questing Script: updatePackage() invoked")
  local path = profilePath .. "/questing downloads/QuestingWithNoax.xml"
  debugEcho("update alias disabled")
  disableAlias("Questing Update Alias")
  debugEcho("qwn.updating set to true")
  qwn.updating = true
  debugEcho("uninstalling QuestingWithNoax")
  uninstallPackage("QuestingWithNoax")
  debugEcho("reinstalling QuestingWithNoax")
  installPackage(path)
  debugEcho("qwn.updating set to nil")
  qwn.updating = nil
  debugEcho("updatePackage() is complete")
  noaxEcho("Now You're Questing With Noax Script updated successfully!")
  config()
end

function qwn.downloadPackage()
  debugEcho("Questing Script: downloadPackage() invoked\n")
  local path, file = profilePath .. "/questing downloads", "/QuestingWithNoax.xml"
  debugEcho("qwn.downloading set to true")
  qwn.downloading = true
  debugEcho("downloading xml file from " .. tostring(qwn.downloadPath))
  downloadFile(path .. file, qwn.downloadPath .. file)
  debugEcho("qwn.downloadPackage() is complete")
end

--Event handler, what we do on what event
function qwn.eventHandler(event, ...)
  debugEcho("Questing Script: qwnEventHandler() invoked")
  if event == "sysDownloadDone" and qwn.downloading then
    local file = arg[1]
    debugEcho("event: sysDownloadDone, file: " ..tostring(file))
    if string.ends(file,"/versions.lua") then
      debugEcho("qwn.downloading set to false")
      qwn.downloading = false
      compareVersion()
    elseif string.ends(file,"/QuestingWithNoax.xml") then
      debugEcho("qwn.downloading set to false")
      qwn.downloading = false
      updatePackage()
    else
      debugEcho("file was not a file we handle")
    end
  elseif event == "sysDownloadError" and downloading then
    local file = arg[1]
    debugEcho("event: sysDownloadError, file: " ..tostring(file))
    if string.ends(file,"/versions.lua") then
      errorEcho("qwn failed to download file versions.lua")
    elseif string.ends(file,"/QuestingWithNoax.xml") then
      errorEcho("qwn failed to download file QuestingWithNoax.xml")
    else
      debugEcho("file was not a file we handle")
    end
  elseif event == "sysUninstallPackage" and not qwn.updating and arg[1] == "QuestingWithNoax" then
    debugEcho("event: sysUninstallPackage")
    for _,id in ipairs(qwn.registeredEvents) do
      killAnonymousEventHandler(id)
    end
  --the mudserver has been coded to send IAC AYT on connect and reconnect
  elseif event == "sysTelnetEvent" then
    debugEcho("event: sysTelnetEvent")
    if tonumber(arg[1]) == 246 then --246 is AYT
      debugEcho("handled code: " .. tostring(arg[1]))
      debugEcho("downloading set to false")
      qwn.downloading = false
      config()
      qwn.downloadVersions()
    else
      debugEcho("unhandled code: " .. tostring(arg[1]))
    end
  end
end

qwn.registeredEvents = { --all of the events we will need to trigger on
  registerAnonymousEventHandler("sysDownloadDone", "qwn.eventHandler"),
  registerAnonymousEventHandler("sysDownloadError", "qwn.eventHandler"),
  registerAnonymousEventHandler("sysDataSendRequest", "qwn.eventHandler"),
  registerAnonymousEventHandler("sysUninstallPackage", "qwn.eventHandler"),
  registerAnonymousEventHandler("sysTelnetEvent", "qwn.eventHandler"),
  }</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
